generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

enum UserRole {
  ADMIN
  COORDINATOR
  STAFF
  CLIENT
}

enum PropertyType {
  RESIDENTIAL
  VACATION_RENTAL
  OFFICE
}

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model User {
  id           String    @id @default(cuid())
  email        String    @unique
  fullName     String
  phone        String?
  role         UserRole  @default(CLIENT)
  isActive     Boolean   @default(true)
  passwordHash String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  properties   Property[]
  bookings     Booking[] @relation("BookingCustomer")
  assignments  Booking[] @relation("BookingCrew")
  tokens       RefreshToken[]
}

model Property {
  id          String       @id @default(cuid())
  label       String       @unique
  addressLine String
  city        String
  state       String @default("FL")
  zipCode     String
  type        PropertyType
  notes       String?
  sqft        Int?
  bedrooms    Int?
  bathrooms   Int?
  ownerId     String
  owner       User         @relation(fields: [ownerId], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  bookings    Booking[]
}

model Service {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  basePrice   Decimal  @db.Decimal(10, 2)
  durationMin Int
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  bookings    Booking[]
}

model Booking {
  id              String        @id @default(cuid())
  code            String        @unique
  scheduledAt     DateTime
  durationMin     Int
  notes           String?
  status          BookingStatus @default(PENDING)
  totalAmount     Decimal       @db.Decimal(10, 2)
  customerId      String
  customer        User          @relation("BookingCustomer", fields: [customerId], references: [id])
  assignedStaffId String?
  assignedStaff   User?         @relation("BookingCrew", fields: [assignedStaffId], references: [id])
  propertyId      String
  property        Property      @relation(fields: [propertyId], references: [id])
  serviceId       String
  service         Service       @relation(fields: [serviceId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model RefreshToken {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
}
