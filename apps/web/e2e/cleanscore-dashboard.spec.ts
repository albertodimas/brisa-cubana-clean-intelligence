import { test, expect } from "@playwright/test";
import type { APIRequestContext, Page, Cookie } from "@playwright/test";

const API_BASE = process.env.PLAYWRIGHT_API_URL ?? "http://127.0.0.1:3001";
const WEB_BASE = process.env.PLAYWRIGHT_BASE_URL ?? "http://127.0.0.1:3000";
const ADMIN_EMAIL = "admin@brisacubanaclean.com";
const ADMIN_PASSWORD = "Admin123!";

async function ensureDraftReport(request: APIRequestContext) {
  const loginResponse = await request.post(`${API_BASE}/api/auth/login`, {
    data: {
      email: ADMIN_EMAIL,
      password: ADMIN_PASSWORD,
    },
  });

  expect(loginResponse.ok()).toBeTruthy();

  const { token } = (await loginResponse.json()) as { token: string };
  expect(token).toBeTruthy();

  const bookingId = "booking-completed-1";
  const uniqueSuffix = Date.now();

  const reportResponse = await request.post(
    `${API_BASE}/api/reports/cleanscore`,
    {
      headers: {
        Authorization: `Bearer ${token}`,
        "Content-Type": "application/json",
      },
      data: {
        bookingId,
        images: [
          `https://storage.mock/cleanscore/${uniqueSuffix}-livingroom.jpg`,
          `https://storage.mock/cleanscore/${uniqueSuffix}-kitchen.jpg`,
        ],
        videos: [
          `https://storage.mock/cleanscore/${uniqueSuffix}-walkthrough.mp4`,
        ],
        checklist: [
          { area: "Kitchen", status: "PASS" },
          { area: "Bathrooms", status: "PASS" },
          { area: "Final inspection", status: "PASS" },
        ],
        notes: `Autogenerated from Playwright ${uniqueSuffix}`,
        publish: false,
      },
    },
  );

  expect(reportResponse.ok()).toBeTruthy();

  const json = (await reportResponse.json()) as { reportId?: string };
  expect(json.reportId).toBeTruthy();

  const resetResponse = await request.patch(
    `${API_BASE}/api/reports/cleanscore/${bookingId}`,
    {
      headers: {
        Authorization: `Bearer ${token}`,
        "Content-Type": "application/json",
      },
      data: { status: "DRAFT" },
    },
  );

  expect(resetResponse.ok()).toBeTruthy();
  return bookingId;
}

async function establishSession(page: Page, request: APIRequestContext) {
  const csrfResponse = await request.get(`${WEB_BASE}/api/auth/csrf`);
  expect(csrfResponse.ok()).toBeTruthy();
  const { csrfToken } = (await csrfResponse.json()) as { csrfToken: string };
  expect(csrfToken).toBeTruthy();

  const callbackResponse = await request.fetch(
    `${WEB_BASE}/api/auth/callback/credentials?json=true`,
    {
      method: "POST",
      maxRedirects: 0,
      form: {
        csrfToken,
        email: ADMIN_EMAIL,
        password: ADMIN_PASSWORD,
        callbackUrl: `${WEB_BASE}/dashboard`,
      },
    },
  );

  expect([200, 302]).toContain(callbackResponse.status());

  const cookieHeaders = callbackResponse
    .headersArray()
    .filter((header) => header.name.toLowerCase() === "set-cookie");

  expect(cookieHeaders.length).toBeGreaterThan(0);

  const { hostname } = new URL(WEB_BASE);

  const cookies: Cookie[] = cookieHeaders.map((header) => {
    const [cookiePair, ...attributePairs] = header.value.split(";");
    const [cookieName, ...cookieValueParts] = cookiePair.split("=");
    const cookieValue = cookieValueParts.join("=");
    const cookie: Cookie = {
      name: cookieName.trim(),
      value: cookieValue.trim(),
      domain: hostname,
      path: "/",
    };

    for (const attribute of attributePairs) {
      const [rawKey, rawValue] = attribute.trim().split("=");
      const key = rawKey?.toLowerCase();
      if (!key) continue;
      switch (key) {
        case "httponly":
          cookie.httpOnly = true;
          break;
        case "secure":
          cookie.secure = true;
          break;
        case "samesite":
          cookie.sameSite = (rawValue ?? "Lax") as "Strict" | "Lax" | "None";
          break;
        case "expires":
          cookie.expires = Math.round(
            new Date(rawValue ?? "").getTime() / 1000,
          );
          break;
        case "max-age":
          cookie.expires =
            Math.round(Date.now() / 1000) + Number(rawValue ?? "0");
          break;
      }
    }

    return cookie;
  });

  await page.context().addCookies(cookies);
}

test.describe("CleanScore dashboard", () => {
  test("allows filtering and publishing CleanScore reports", async ({
    page,
    request,
  }) => {
    const bookingId = await ensureDraftReport(request);

    await establishSession(page, request);

    await page.goto("/dashboard/reports/cleanscore");

    await expect(
      page.getByRole("heading", { level: 1, name: /CleanScore/ }),
    ).toBeVisible();

    await page.getByTestId("status-filter").selectOption("draft");
    await page.getByTestId("cleanscore-search").fill(bookingId);

    const card = () =>
      page.getByRole("article").filter({
        has: page.getByRole("heading", {
          level: 3,
          name: `Booking ${bookingId}`,
        }),
      });

    await expect(card()).toContainText("Borrador");

    page.once("dialog", async (dialog) => {
      await dialog.accept();
    });

    const patchPromise = page.waitForResponse((response) => {
      const request = response.request();
      return (
        request.method() === "PATCH" &&
        response.url().includes(`/api/reports/cleanscore/${bookingId}`)
      );
    });

    await card().getByRole("button", { name: "Publicar y enviar" }).click();

    const patchResponse = await patchPromise;
    expect(patchResponse.ok()).toBeTruthy();

    const refreshResponse = await page.waitForResponse((response) => {
      const request = response.request();
      return (
        request.method() === "GET" &&
        response.url().includes("/api/reports/cleanscore?limit")
      );
    });

    expect(refreshResponse.ok()).toBeTruthy();

    await page.getByTestId("status-filter").selectOption("published");

    await expect(card()).toContainText("Publicado");
  });
});
