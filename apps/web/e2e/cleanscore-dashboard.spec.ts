import { test, expect } from "@playwright/test";
import type { APIRequestContext } from "@playwright/test";
import { API_BASE, establishSession, WEB_BASE } from "./fixtures/session";
const ADMIN_EMAIL = "admin@brisacubanaclean.com";
const ADMIN_PASSWORD = "Admin123!";

async function ensureDraftReport(request: APIRequestContext) {
  const loginResponse = await request.post(`${API_BASE}/api/auth/login`, {
    data: {
      email: ADMIN_EMAIL,
      password: ADMIN_PASSWORD,
    },
  });

  expect(loginResponse.ok()).toBeTruthy();

  const { token } = (await loginResponse.json()) as { token: string };
  expect(token).toBeTruthy();

  const bookingId = "booking-completed-1";
  const uniqueSuffix = Date.now();

  const reportResponse = await request.post(
    `${API_BASE}/api/reports/cleanscore`,
    {
      headers: {
        Authorization: `Bearer ${token}`,
        "Content-Type": "application/json",
      },
      data: {
        bookingId,
        images: [
          `https://storage.mock/cleanscore/${uniqueSuffix}-livingroom.jpg`,
          `https://storage.mock/cleanscore/${uniqueSuffix}-kitchen.jpg`,
        ],
        videos: [
          `https://storage.mock/cleanscore/${uniqueSuffix}-walkthrough.mp4`,
        ],
        checklist: [
          { area: "Kitchen", status: "PASS" },
          { area: "Bathrooms", status: "PASS" },
          { area: "Final inspection", status: "PASS" },
        ],
        notes: `Autogenerated from Playwright ${uniqueSuffix}`,
        publish: false,
      },
    },
  );

  expect(reportResponse.ok()).toBeTruthy();

  const json = (await reportResponse.json()) as { reportId?: string };
  expect(json.reportId).toBeTruthy();

  const resetResponse = await request.patch(
    `${API_BASE}/api/reports/cleanscore/${bookingId}`,
    {
      headers: {
        Authorization: `Bearer ${token}`,
        "Content-Type": "application/json",
      },
      data: { status: "DRAFT" },
    },
  );

  expect(resetResponse.ok()).toBeTruthy();
  return bookingId;
}

test.describe("CleanScore dashboard", () => {
  test("allows filtering and publishing CleanScore reports", async ({
    page,
    request,
  }) => {
    const bookingId = await ensureDraftReport(request);

    await establishSession(page, request, {
      email: ADMIN_EMAIL,
      password: ADMIN_PASSWORD,
    });

    await page.goto("/dashboard/reports/cleanscore");

    await expect(
      page.getByRole("heading", { level: 1, name: /CleanScore/ }),
    ).toBeVisible();

    await page.getByTestId("status-filter").selectOption("draft");
    await page.getByTestId("cleanscore-search").fill(bookingId);

    const card = () =>
      page.getByRole("article").filter({
        has: page.getByRole("heading", {
          level: 3,
          name: `Booking ${bookingId}`,
        }),
      });

    await expect(card()).toContainText("Borrador");

    page.once("dialog", async (dialog) => {
      await dialog.accept();
    });

    const patchPromise = page.waitForResponse((response) => {
      const request = response.request();
      return (
        request.method() === "PATCH" &&
        response.url().includes(`/api/reports/cleanscore/${bookingId}`)
      );
    });

    await card().getByRole("button", { name: "Publicar y enviar" }).click();

    const patchResponse = await patchPromise;
    expect(patchResponse.ok()).toBeTruthy();

    const refreshResponse = await page.waitForResponse((response) => {
      const request = response.request();
      return (
        request.method() === "GET" &&
        response.url().includes("/api/reports/cleanscore?limit")
      );
    });

    expect(refreshResponse.ok()).toBeTruthy();

    await page.getByTestId("status-filter").selectOption("published");

    await expect(card()).toContainText("Publicado");
  });
});
