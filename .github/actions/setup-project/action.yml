name: Setup project
description: Prepare the pnpm workspace with Node.js, dependencies, Prisma artifacts, and test environment variables.
inputs:
  node-version:
    description: Node.js version to install.
    required: false
    default: "22.x"
  pnpm-version:
    description: pnpm version to install.
    required: false
    default: "10.18.0"
  install-playwright:
    description: Install Playwright browsers.
    required: false
    default: "false"
  run-prisma-generate:
    description: Run Prisma generate for the API package.
    required: false
    default: "true"
  database-url:
    description: Database URL used for Prisma commands and runtime tests.
    required: false
    default: "postgresql://postgres:postgres@127.0.0.1:5433/brisa_e2e"
  database-url-unpooled:
    description: Secondary database URL without pooling.
    required: false
    default: "postgresql://postgres:postgres@127.0.0.1:5433/brisa_e2e"
  api-token:
    description: API token used by integration tests.
    required: false
    default: "test-api-token"
  jwt-secret:
    description: JWT secret value for tests.
    required: false
    default: "test-jwt-secret-for-ci-only"
  auth-secret:
    description: Auth secret value for NextAuth.
    required: false
    default: "test-auth-secret-for-ci-only"
  e2e-admin-email:
    description: Admin email used in seeded data.
    required: false
    default: "admin@brisacubanacleanintelligence.com"
  e2e-admin-password:
    description: Admin password used in seeded data.
    required: false
    default: "Brisa123!"
  e2e-coordinator-email:
    description: Coordinator email used in seeded data.
    required: false
    default: "operaciones@brisacubanacleanintelligence.com"
  e2e-coordinator-password:
    description: Coordinator password used in seeded data.
    required: false
    default: "Brisa123!"
  login-rate-limit:
    description: Login rate limit for tests.
    required: false
    default: "20"
  login-rate-limit-window-ms:
    description: Login rate limit window for tests (ms).
    required: false
    default: "60000"
  next-public-api-url:
    description: Public API URL consumed by the web app.
    required: false
    default: "http://localhost:3001"
  enable-test-utils:
    description: Toggle to enable internal testing utilities with relaxed safeguards.
    required: false
    default: "true"
  portal-magic-link-from:
    description: From header used when sending portal magic link emails.
    required: false
    default: ""
  portal-magic-link-base-url:
    description: Base URL used to compose magic link confirmation URLs.
    required: false
    default: ""
  portal-magic-link-confirmation-path:
    description: Relative confirmation path appended to the base URL.
    required: false
    default: ""
  portal-magic-link-smtp-host:
    description: SMTP host for portal magic link delivery.
    required: false
    default: ""
  portal-magic-link-smtp-port:
    description: SMTP port for portal magic link delivery.
    required: false
    default: ""
  portal-magic-link-smtp-user:
    description: SMTP username for portal magic link delivery.
    required: false
    default: ""
  portal-magic-link-smtp-password:
    description: SMTP password for portal magic link delivery.
    required: false
    default: ""
  portal-magic-link-smtp-secure:
    description: Whether SMTP connection should be secure (\"true\" or \"false\").
    required: false
    default: ""
  portal-magic-link-expose-debug:
    description: Toggle to expose debug tokens in portal magic link responses.
    required: false
    default: "true"
  next-public-posthog-key:
    description: Public PostHog API key used by web analytics.
    required: false
    default: ""
  next-public-posthog-host:
    description: PostHog ingestion host URL.
    required: false
    default: "https://us.posthog.com"
  log_drain_verification_code:
    description: Verification code returned in x-vercel-verify for log drain validation.
    required: false
    default: "local-log-drain-verification-code"
runs:
  using: "composite"
  steps:
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: ${{ inputs.pnpm-version }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}
        cache: "pnpm"

    - name: Install dependencies
      shell: bash
      run: pnpm install --frozen-lockfile

    - name: Export runtime environment variables
      shell: bash
      run: |
        set -euo pipefail
        api_token="${{ inputs.api-token }}"
        jwt_secret="${{ inputs.jwt-secret }}"
        auth_secret="${{ inputs.auth-secret }}"
        database_url="${{ inputs.database-url }}"
        database_url_unpooled="${{ inputs.database-url-unpooled }}"
        next_public_api_url="${{ inputs.next-public-api-url }}"
        login_rate_limit="${{ inputs.login-rate-limit }}"
        login_rate_limit_window_ms="${{ inputs.login-rate-limit-window-ms }}"
        e2e_admin_email="${{ inputs.e2e-admin-email }}"
        e2e_admin_password="${{ inputs.e2e-admin-password }}"
        e2e_coordinator_email="${{ inputs.e2e-coordinator-email }}"
        e2e_coordinator_password="${{ inputs.e2e-coordinator-password }}"
        enable_test_utils="${{ inputs.enable-test-utils }}"
        portal_magic_link_from="${{ inputs.portal-magic-link-from }}"
        portal_magic_link_base_url="${{ inputs.portal-magic-link-base-url }}"
        portal_magic_link_confirmation_path="${{ inputs.portal-magic-link-confirmation-path }}"
        portal_magic_link_smtp_host="${{ inputs.portal-magic-link-smtp-host }}"
        portal_magic_link_smtp_port="${{ inputs.portal-magic-link-smtp-port }}"
        portal_magic_link_smtp_user="${{ inputs.portal-magic-link-smtp-user }}"
        portal_magic_link_smtp_password="${{ inputs.portal-magic-link-smtp-password }}"
        portal_magic_link_smtp_secure="${{ inputs.portal-magic-link-smtp-secure }}"
        portal_magic_link_expose_debug="${{ inputs.portal-magic-link-expose-debug }}"
        log_drain_verification_code="${{ inputs.log_drain_verification_code }}"
        next_public_posthog_key="${{ inputs.next-public-posthog-key }}"
        next_public_posthog_host="${{ inputs.next-public-posthog-host }}"

        if [ -z "$api_token" ]; then api_token="test-api-token"; fi
        if [ -z "$jwt_secret" ]; then jwt_secret="test-jwt-secret-for-ci-only"; fi
        if [ -z "$auth_secret" ]; then auth_secret="test-auth-secret-for-ci-only"; fi
        if [ -z "$database_url" ]; then database_url="postgresql://postgres:postgres@127.0.0.1:5433/brisa_e2e"; fi
        if [ -z "$database_url_unpooled" ]; then database_url_unpooled="$database_url"; fi
        if [ -z "$next_public_api_url" ]; then next_public_api_url="http://localhost:3001"; fi
        if [ -z "$login_rate_limit" ]; then login_rate_limit="20"; fi
        if [ -z "$login_rate_limit_window_ms" ]; then login_rate_limit_window_ms="60000"; fi
        if [ -z "$e2e_admin_email" ]; then e2e_admin_email="admin@brisacubanacleanintelligence.com"; fi
        if [ -z "$e2e_admin_password" ]; then e2e_admin_password="Brisa123!"; fi
        if [ -z "$e2e_coordinator_email" ]; then e2e_coordinator_email="operaciones@brisacubanacleanintelligence.com"; fi
        if [ -z "$e2e_coordinator_password" ]; then e2e_coordinator_password="Brisa123!"; fi
        if [ -z "$enable_test_utils" ]; then enable_test_utils="true"; fi
        if [ -z "$portal_magic_link_base_url" ]; then portal_magic_link_base_url="http://localhost:3000"; fi
        if [ -z "$portal_magic_link_confirmation_path" ]; then portal_magic_link_confirmation_path="/clientes/acceso/confirmar"; fi
        if [ -z "$portal_magic_link_expose_debug" ]; then portal_magic_link_expose_debug="true"; fi
        if [ -z "$log_drain_verification_code" ]; then log_drain_verification_code="local-log-drain-verification-code"; fi

        {
          echo "API_TOKEN=$api_token"
          echo "JWT_SECRET=$jwt_secret"
          echo "AUTH_SECRET=$auth_secret"
          echo "DATABASE_URL=$database_url"
          echo "DATABASE_URL_UNPOOLED=$database_url_unpooled"
          echo "NEXT_PUBLIC_API_URL=$next_public_api_url"
          echo "LOGIN_RATE_LIMIT=$login_rate_limit"
          echo "LOGIN_RATE_LIMIT_WINDOW_MS=$login_rate_limit_window_ms"
          echo "E2E_ADMIN_EMAIL=$e2e_admin_email"
          echo "E2E_ADMIN_PASSWORD=$e2e_admin_password"
          echo "E2E_COORDINATOR_EMAIL=$e2e_coordinator_email"
          echo "E2E_COORDINATOR_PASSWORD=$e2e_coordinator_password"
          echo "ENABLE_TEST_UTILS=$enable_test_utils"
          echo "PORTAL_MAGIC_LINK_BASE_URL=$portal_magic_link_base_url"
          echo "PORTAL_MAGIC_LINK_CONFIRMATION_PATH=$portal_magic_link_confirmation_path"
          echo "PORTAL_MAGIC_LINK_EXPOSE_DEBUG=$portal_magic_link_expose_debug"
          echo "LOG_DRAIN_VERIFICATION_CODE=$log_drain_verification_code"
        } >> "$GITHUB_ENV"

        if [ -n "$portal_magic_link_from" ]; then
          echo "PORTAL_MAGIC_LINK_FROM=$portal_magic_link_from" >> "$GITHUB_ENV"
        fi

        if [ -n "$portal_magic_link_smtp_host" ]; then
          echo "PORTAL_MAGIC_LINK_SMTP_HOST=$portal_magic_link_smtp_host" >> "$GITHUB_ENV"
        fi

        if [ -n "$portal_magic_link_smtp_port" ]; then
          echo "PORTAL_MAGIC_LINK_SMTP_PORT=$portal_magic_link_smtp_port" >> "$GITHUB_ENV"
        fi

        if [ -n "$portal_magic_link_smtp_user" ]; then
          echo "PORTAL_MAGIC_LINK_SMTP_USER=$portal_magic_link_smtp_user" >> "$GITHUB_ENV"
        fi

        if [ -n "$portal_magic_link_smtp_password" ]; then
          echo "PORTAL_MAGIC_LINK_SMTP_PASSWORD=$portal_magic_link_smtp_password" >> "$GITHUB_ENV"
        fi

        if [ -n "$portal_magic_link_smtp_secure" ]; then
          echo "PORTAL_MAGIC_LINK_SMTP_SECURE=$portal_magic_link_smtp_secure" >> "$GITHUB_ENV"
        fi

        if [ -n "$next_public_posthog_key" ]; then
          echo "NEXT_PUBLIC_POSTHOG_KEY=$next_public_posthog_key" >> "$GITHUB_ENV"
        fi

        if [ -n "$next_public_posthog_host" ]; then
          echo "NEXT_PUBLIC_POSTHOG_HOST=$next_public_posthog_host" >> "$GITHUB_ENV"
        fi

    - name: Generate Prisma client
      if: ${{ inputs.run-prisma-generate == 'true' }}
      working-directory: apps/api
      env:
        DATABASE_URL: ${{ inputs.database-url }}
        DATABASE_URL_UNPOOLED: ${{ inputs.database-url-unpooled }}
      shell: bash
      run: pnpm exec prisma generate

    - name: Install Playwright browsers
      if: ${{ inputs.install-playwright == 'true' }}
      shell: bash
      run: pnpm exec playwright install --with-deps chromium
