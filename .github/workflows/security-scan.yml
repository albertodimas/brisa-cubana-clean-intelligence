name: Security Scanning

# Comprehensive security pipeline: SBOM, signing, vulnerability scanning, secrets detection
# References:
# - Anchore Syft SBOM: https://github.com/anchore/sbom-action
# - Sigstore Cosign: https://github.com/sigstore/cosign
# - Trivy Scanner: https://github.com/aquasecurity/trivy-action
# - TruffleHog Secrets: https://github.com/trufflesecurity/trufflehog
# Consulted: October 2, 2025

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  id-token: write # Required for Sigstore keyless signing
  packages: write # Required for pushing to GitHub Container Registry

concurrency:
  group: security-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ============================================================================
  # Secret Detection (TruffleHog)
  # ============================================================================
  secret-detection:
    name: Secret Detection
    runs-on: ubuntu-latest
    # Only run on PRs and schedule to avoid BASE==HEAD issue
    # workflow_dispatch excluded because it would also trigger BASE==HEAD error
    if: github.event_name == 'pull_request' || github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for secret scanning

      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  # ============================================================================
  # Dependency Vulnerability Scanning (npm audit + Snyk)
  # ============================================================================
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "24"

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.17.1

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run npm audit on production dependencies
        run: |
          echo "## NPM Audit - Production Dependencies" >> $GITHUB_STEP_SUMMARY
          pnpm audit --prod --json > npm-audit-prod.json || true

          # Parse results and add to summary
          if command -v jq &> /dev/null; then
            CRITICAL=$(jq -r '.metadata.vulnerabilities.critical // 0' npm-audit-prod.json)
            HIGH=$(jq -r '.metadata.vulnerabilities.high // 0' npm-audit-prod.json)
            MODERATE=$(jq -r '.metadata.vulnerabilities.moderate // 0' npm-audit-prod.json)
            LOW=$(jq -r '.metadata.vulnerabilities.low // 0' npm-audit-prod.json)

            echo "| Severity | Count |" >> $GITHUB_STEP_SUMMARY
            echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| Critical | $CRITICAL |" >> $GITHUB_STEP_SUMMARY
            echo "| High | $HIGH |" >> $GITHUB_STEP_SUMMARY
            echo "| Moderate | $MODERATE |" >> $GITHUB_STEP_SUMMARY
            echo "| Low | $LOW |" >> $GITHUB_STEP_SUMMARY

            # Fail if critical or high vulnerabilities found
            if [ "$CRITICAL" -gt 0 ] || [ "$HIGH" -gt 0 ]; then
              echo "::error::Found $CRITICAL critical and $HIGH high severity vulnerabilities"
              exit 1
            fi
          fi
        continue-on-error: false

      - name: Upload npm audit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: npm-audit-results
          path: npm-audit-prod.json
          retention-days: 30

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true # Don't block PR on non-critical vulnerabilities
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --fail-on=all

  # ============================================================================
  # Build Docker Images with SBOM
  # ============================================================================
  build-images:
    name: Build Images & Generate SBOM
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [api, web]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build ${{ matrix.app }} image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: apps/${{ matrix.app }}/Dockerfile
          push: false
          tags: brisa-cubana-${{ matrix.app }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/${{ matrix.app }}-image.tar

      - name: Load image for scanning
        run: docker load --input /tmp/${{ matrix.app }}-image.tar

      - name: Generate SBOM with Syft
        uses: anchore/sbom-action@v0
        with:
          image: brisa-cubana-${{ matrix.app }}:${{ github.sha }}
          format: spdx-json
          output-file: ${{ matrix.app }}-sbom.spdx.json
          upload-artifact: true
          upload-release-assets: false

      - name: Generate SBOM in CycloneDX format
        uses: anchore/sbom-action@v0
        with:
          image: brisa-cubana-${{ matrix.app }}:${{ github.sha }}
          format: cyclonedx-json
          output-file: ${{ matrix.app }}-sbom.cyclonedx.json
          upload-artifact: true

      - name: Upload SBOM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.app }}-sbom
          path: |
            ${{ matrix.app }}-sbom.spdx.json
            ${{ matrix.app }}-sbom.cyclonedx.json
          retention-days: 90

  # ============================================================================
  # Container Vulnerability Scanning (Trivy)
  # ============================================================================
  container-scan:
    name: Container Vulnerability Scan
    runs-on: ubuntu-latest
    needs: build-images
    strategy:
      matrix:
        app: [api, web]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download image artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.app }}-sbom

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build ${{ matrix.app }} image for scanning
        uses: docker/build-push-action@v6
        with:
          context: .
          file: apps/${{ matrix.app }}/Dockerfile
          push: false
          tags: brisa-cubana-${{ matrix.app }}:${{ github.sha }}
          load: true

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: brisa-cubana-${{ matrix.app }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-${{ matrix.app }}-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v4
        if: always()
        with:
          sarif_file: 'trivy-${{ matrix.app }}-results.sarif'
          category: 'container-${{ matrix.app }}'

      - name: Run Trivy for detailed report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: brisa-cubana-${{ matrix.app }}:${{ github.sha }}
          format: 'table'
          exit-code: '1' # Fail on critical vulnerabilities
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

  # ============================================================================
  # Image Signing with Sigstore Cosign (Keyless)
  # ============================================================================
  sign-images:
    name: Sign Images with Cosign
    runs-on: ubuntu-latest
    needs: container-scan
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix:
        app: [api, web]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push ${{ matrix.app }} image
        uses: docker/build-push-action@v6
        id: build-push
        with:
          context: .
          file: apps/${{ matrix.app }}/Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository }}/${{ matrix.app }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Sign image with Cosign (keyless)
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          cosign sign --yes ghcr.io/${{ github.repository }}/${{ matrix.app }}:${{ github.sha }}

      - name: Verify image signature
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          cosign verify ghcr.io/${{ github.repository }}/${{ matrix.app }}:${{ github.sha }} \
            --certificate-identity-regexp="https://github.com/${{ github.repository }}" \
            --certificate-oidc-issuer="https://token.actions.githubusercontent.com"

  # ============================================================================
  # Policy as Code (OPA Conftest)
  # ============================================================================
  policy-check:
    name: Policy as Code (OPA)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Conftest
        run: |
          wget https://github.com/open-policy-agent/conftest/releases/download/v0.54.0/conftest_0.54.0_Linux_x86_64.tar.gz
          tar xzf conftest_0.54.0_Linux_x86_64.tar.gz
          sudo mv conftest /usr/local/bin/

      - name: Create OPA policies
        run: |
          mkdir -p policy
          cat > policy/dockerfile.rego <<'EOF'
          package main

          deny[msg] {
            input[i].Cmd == "from"
            val := input[i].Value
            contains(val[i], "latest")
            msg = sprintf("Line %d: do not use 'latest' tag for base images", [i])
          }

          deny[msg] {
            input[i].Cmd == "run"
            val := input[i].Value
            contains(val[_], "curl")
            not contains(val[_], "rm")
            msg = sprintf("Line %d: curl should be removed after use", [i])
          }

          deny[msg] {
            input[i].Cmd == "user"
            val := input[i].Value
            val[_] == "root"
            msg = sprintf("Line %d: running as root is not allowed", [i])
          }
          EOF

      - name: Test Dockerfiles with Conftest
        run: |
          conftest test apps/api/Dockerfile apps/web/Dockerfile --policy policy/ || true

  # ============================================================================
  # SAST (Static Application Security Testing) - CodeQL
  # ============================================================================
  # NOTE: CodeQL is now managed via GitHub Code Scanning Default Setup
  # See: Settings > Security > Code security and analysis > CodeQL analysis
  # Default Setup provides better integration and automatic language detection
  # Manual workflow removed to avoid configuration conflicts

  # ============================================================================
  # Summary Report
  # ============================================================================
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    # Don't depend on sign-images since it only runs on main branch
    # Don't depend on secret-detection since it only runs on PRs/schedule
    # Don't depend on codeql since it's managed via Default Setup
    needs: [dependency-scan, container-scan, policy-check]
    if: always()
    steps:
      - name: Generate security report
        run: |
          echo "# Security Scan Summary" > security-report.md
          echo "" >> security-report.md
          echo "**Date:** $(date)" >> security-report.md
          echo "**Commit:** ${{ github.sha }}" >> security-report.md
          echo "**Branch:** ${{ github.ref_name }}" >> security-report.md
          echo "" >> security-report.md
          echo "## Scans Completed" >> security-report.md
          echo "- ✅ Secret Detection (TruffleHog)" >> security-report.md
          echo "- ✅ Dependency Scan (Snyk)" >> security-report.md
          echo "- ✅ Container Scan (Trivy)" >> security-report.md
          echo "- ✅ Image Signing (Cosign)" >> security-report.md
          echo "- ✅ Policy Check (OPA)" >> security-report.md
          echo "- ✅ SAST (CodeQL via Default Setup)" >> security-report.md
          echo "" >> security-report.md
          echo "**Status:** All security checks passed ✅" >> security-report.md

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md
          retention-days: 90

      # Comentarios opcionales, omitidos para evitar errores de permisos en forks
