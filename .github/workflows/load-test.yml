name: Load Tests

on:
  # Manual trigger with scenario selection
  workflow_dispatch:
    inputs:
      scenario:
        description: 'Test scenario to run'
        required: true
        default: 'smoke'
        type: choice
        options:
          - smoke
          - load
          - stress
          - spike
          - soak
          - all
      staging_url:
        description: 'Staging URL (optional)'
        required: false
        default: 'https://staging.brisacubanaclean.com'
        type: string
      soak_duration:
        description: 'Soak test duration (e.g., 30m, 1h)'
        required: false
        default: '30m'
        type: string

  # Automatic smoke test on PR to main
  pull_request:
    branches:
      - main
    paths:
      - 'apps/api/**'
      - 'apps/web/**'
      - 'packages/**'
      - 'tests/load/**'

  # Scheduled weekly load test
  schedule:
    - cron: '0 2 * * 1' # Every Monday at 2 AM UTC

env:
  STAGING_URL: ${{ inputs.staging_url || 'https://staging.brisacubanaclean.com' }}
  NODE_VERSION: '20.x'
  K6_VERSION: '0.54.0'

jobs:
  load-test:
    name: Run Load Tests
    runs-on: ubuntu-latest
    timeout-minutes: 90 # Max timeout for soak tests
    permissions:
      contents: read
      pull-requests: write
      issues: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring \
            --keyring /usr/share/keyrings/k6-archive-keyring.gpg \
            --keyserver hkp://keyserver.ubuntu.com:80 \
            --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | \
            sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6 -y
          k6 version

      - name: Verify staging availability
        run: |
          echo "Testing connection to: ${{ env.STAGING_URL }}/api/health"

          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" \
            "${{ env.STAGING_URL }}/api/health" \
            --max-time 10 || echo "000")

          echo "HTTP Response Code: $HTTP_CODE"

          if [[ "$HTTP_CODE" != "200" ]]; then
            echo "::warning::Staging environment returned HTTP $HTTP_CODE"
            if [[ "$HTTP_CODE" == "000" ]]; then
              echo "::error::Cannot reach staging environment"
              exit 1
            fi
          else
            echo "‚úì Staging environment is available"
          fi

      - name: Create results directory
        run: |
          mkdir -p tests/load/results
          chmod 755 tests/load/results

      - name: Determine test scenario
        id: scenario
        run: |
          # For PR: always run smoke test
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "scenario=smoke" >> $GITHUB_OUTPUT
            echo "Running smoke test for PR validation"

          # For schedule: run load test
          elif [[ "${{ github.event_name }}" == "schedule" ]]; then
            echo "scenario=load" >> $GITHUB_OUTPUT
            echo "Running weekly load test"

          # For manual: use input
          else
            echo "scenario=${{ inputs.scenario }}" >> $GITHUB_OUTPUT
            echo "Running ${{ inputs.scenario }} test (manual trigger)"
          fi

      - name: Run smoke test
        if: steps.scenario.outputs.scenario == 'smoke' || steps.scenario.outputs.scenario == 'all'
        env:
          API_BASE_URL: ${{ env.STAGING_URL }}/api
          TEST_ADMIN_EMAIL: ${{ secrets.TEST_ADMIN_EMAIL }}
          TEST_ADMIN_PASSWORD: ${{ secrets.TEST_ADMIN_PASSWORD }}
        run: |
          echo "üß™ Running smoke test..."
          k6 run tests/load/smoke.test.js \
            --out json=tests/load/results/smoke_results.json \
            --summary-export=tests/load/results/smoke_summary.json \
            || echo "::warning::Smoke test failed"

      - name: Run load test
        if: steps.scenario.outputs.scenario == 'load' || steps.scenario.outputs.scenario == 'all'
        env:
          API_BASE_URL: ${{ env.STAGING_URL }}/api
          TEST_CLIENT_EMAIL: ${{ secrets.TEST_CLIENT_EMAIL }}
          TEST_CLIENT_PASSWORD: ${{ secrets.TEST_CLIENT_PASSWORD }}
        run: |
          echo "üöÄ Running load test..."
          k6 run tests/load/load.test.js \
            --out json=tests/load/results/load_results.json \
            --summary-export=tests/load/results/load_summary.json \
            || echo "::warning::Load test failed"

      - name: Run stress test
        if: steps.scenario.outputs.scenario == 'stress' || steps.scenario.outputs.scenario == 'all'
        env:
          API_BASE_URL: ${{ env.STAGING_URL }}/api
          TEST_CLIENT_EMAIL: ${{ secrets.TEST_CLIENT_EMAIL }}
          TEST_CLIENT_PASSWORD: ${{ secrets.TEST_CLIENT_PASSWORD }}
        run: |
          echo "üí™ Running stress test..."
          k6 run tests/load/stress.test.js \
            --out json=tests/load/results/stress_results.json \
            --summary-export=tests/load/results/stress_summary.json \
            || echo "::warning::Stress test failed (expected for breaking point tests)"

      - name: Run spike test
        if: steps.scenario.outputs.scenario == 'spike' || steps.scenario.outputs.scenario == 'all'
        env:
          API_BASE_URL: ${{ env.STAGING_URL }}/api
          TEST_CLIENT_EMAIL: ${{ secrets.TEST_CLIENT_EMAIL }}
          TEST_CLIENT_PASSWORD: ${{ secrets.TEST_CLIENT_PASSWORD }}
        run: |
          echo "‚ö° Running spike test..."
          k6 run tests/load/spike.test.js \
            --out json=tests/load/results/spike_results.json \
            --summary-export=tests/load/results/spike_summary.json \
            || echo "::warning::Spike test failed"

      - name: Run soak test
        if: steps.scenario.outputs.scenario == 'soak' || steps.scenario.outputs.scenario == 'all'
        env:
          API_BASE_URL: ${{ env.STAGING_URL }}/api
          TEST_CLIENT_EMAIL: ${{ secrets.TEST_CLIENT_EMAIL }}
          TEST_CLIENT_PASSWORD: ${{ secrets.TEST_CLIENT_PASSWORD }}
          SOAK_DURATION: ${{ inputs.soak_duration || '30m' }}
        run: |
          echo "‚è±Ô∏è Running soak test (duration: $SOAK_DURATION)..."
          k6 run tests/load/soak.test.js \
            --out json=tests/load/results/soak_results.json \
            --summary-export=tests/load/results/soak_summary.json \
            || echo "::warning::Soak test failed"

      - name: Parse test results
        id: results
        if: always()
        run: |
          # Function to extract metrics from JSON summary
          extract_metrics() {
            local file=$1
            if [[ -f "$file" ]]; then
              local p95=$(jq -r '.metrics.http_req_duration.values["p(95)"] // 0' "$file")
              local p99=$(jq -r '.metrics.http_req_duration.values["p(99)"] // 0' "$file")
              local error_rate=$(jq -r '.metrics.http_req_failed.values.rate // 0' "$file")
              echo "p95=${p95}ms p99=${p99}ms errors=${error_rate}"
            else
              echo "N/A"
            fi
          }

          # Create results summary
          {
            echo "## Load Test Results üìä"
            echo ""
            echo "**Scenario:** ${{ steps.scenario.outputs.scenario }}"
            echo "**Staging URL:** ${{ env.STAGING_URL }}"
            echo "**Timestamp:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
            echo ""

            if [[ -f "tests/load/results/smoke_summary.json" ]]; then
              echo "### Smoke Test"
              echo "$(extract_metrics tests/load/results/smoke_summary.json)"
              echo ""
            fi

            if [[ -f "tests/load/results/load_summary.json" ]]; then
              echo "### Load Test"
              echo "$(extract_metrics tests/load/results/load_summary.json)"
              echo ""
            fi

            if [[ -f "tests/load/results/stress_summary.json" ]]; then
              echo "### Stress Test"
              echo "$(extract_metrics tests/load/results/stress_summary.json)"
              echo ""
            fi

            if [[ -f "tests/load/results/spike_summary.json" ]]; then
              echo "### Spike Test"
              echo "$(extract_metrics tests/load/results/spike_summary.json)"
              echo ""
            fi

            if [[ -f "tests/load/results/soak_summary.json" ]]; then
              echo "### Soak Test"
              echo "$(extract_metrics tests/load/results/soak_summary.json)"
              echo ""
            fi

            echo "### SLA Compliance"
            echo ""
            echo "| Metric | Target | Status |"
            echo "|--------|--------|--------|"

            # Check smoke test compliance
            if [[ -f "tests/load/results/smoke_summary.json" ]]; then
              p95=$(jq -r '.metrics.http_req_duration.values["p(95)"] // 0' tests/load/results/smoke_summary.json)
              p95_int=${p95%.*}
              if [[ $p95_int -lt 500 ]]; then
                echo "| p95 < 500ms | ‚úÖ Pass | ${p95}ms |"
              else
                echo "| p95 < 500ms | ‚ùå Fail | ${p95}ms |"
              fi

              error_rate=$(jq -r '.metrics.http_req_failed.values.rate // 0' tests/load/results/smoke_summary.json)
              error_pct=$(echo "$error_rate * 100" | bc -l | awk '{printf "%.2f", $1}')
              if (( $(echo "$error_rate < 0.01" | bc -l) )); then
                echo "| Error Rate < 1% | ‚úÖ Pass | ${error_pct}% |"
              else
                echo "| Error Rate < 1% | ‚ùå Fail | ${error_pct}% |"
              fi
            fi

            echo ""
            echo "**Full details:** View workflow artifacts"

          } > tests/load/results/comment.md

          cat tests/load/results/comment.md

      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const comment = fs.readFileSync('tests/load/results/comment.md', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: load-test-results-${{ steps.scenario.outputs.scenario }}-${{ github.run_number }}
          path: |
            tests/load/results/*.json
            tests/load/results/*.md
          retention-days: 30

      - name: Check test thresholds
        if: github.event_name == 'pull_request'
        run: |
          # Fail PR if smoke test doesn't meet thresholds
          if [[ -f "tests/load/results/smoke_summary.json" ]]; then
            p95=$(jq -r '.metrics.http_req_duration.values["p(95)"] // 0' tests/load/results/smoke_summary.json)
            p95_int=${p95%.*}
            error_rate=$(jq -r '.metrics.http_req_failed.values.rate // 0' tests/load/results/smoke_summary.json)

            echo "Smoke test results: p95=${p95}ms, error_rate=${error_rate}"

            if [[ $p95_int -gt 1000 ]]; then
              echo "::error::Smoke test p95 ($p95ms) exceeds 1000ms threshold"
              exit 1
            fi

            if (( $(echo "$error_rate > 0.05" | bc -l) )); then
              echo "::error::Smoke test error rate ($(echo "$error_rate * 100" | bc -l)%) exceeds 5% threshold"
              exit 1
            fi

            echo "‚úÖ Smoke test passed SLA requirements"
          fi

      - name: Notify on failure
        if: failure() && github.event_name == 'schedule'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üö® Scheduled Load Test Failed',
              body: `The scheduled load test failed on ${new Date().toISOString()}.

              **Details:**
              - Workflow: ${context.workflow}
              - Run: ${context.runNumber}
              - Run URL: ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}

              Please investigate the performance degradation.`,
              labels: ['performance', 'load-test', 'automated']
            });

  analyze-trends:
    name: Analyze Performance Trends
    needs: load-test
    runs-on: ubuntu-latest
    if: always() && github.event_name != 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download test results
        uses: actions/download-artifact@v4
        with:
          pattern: load-test-results-*
          path: test-results/

      - name: Analyze trends
        run: |
          echo "## Performance Trend Analysis"
          echo ""
          echo "This job would analyze historical test results to detect:"
          echo "- Performance degradation over time"
          echo "- Capacity trends"
          echo "- SLA violations"
          echo ""
          echo "TODO: Implement trend analysis with historical data storage"
          echo "(Consider using InfluxDB, Prometheus, or S3 for historical data)"

      - name: Create trend report
        run: |
          mkdir -p reports
          echo "# Performance Trends Report" > reports/trends.md
          echo "" >> reports/trends.md
          echo "Generated: $(date -u)" >> reports/trends.md
          echo "" >> reports/trends.md
          echo "Historical trend analysis coming soon..." >> reports/trends.md

      - name: Upload trend report
        uses: actions/upload-artifact@v4
        with:
          name: performance-trends-report
          path: reports/trends.md
          retention-days: 90
