name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "24"

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.17.1

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma Client
        run: pnpm --filter=@brisa/api db:generate

      - name: Lint TypeScript
        run: pnpm turbo run lint

      - name: Lint Markdown
        run: pnpm lint:md

      - name: Check spelling
        run: pnpm lint:spelling

  typecheck:
    name: Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "24"

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.17.1

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma Client
        run: pnpm --filter=@brisa/api db:generate

      - name: Type check
        run: pnpm turbo run typecheck

  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: brisa_cubana_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "24"

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.17.1

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma Client
        run: pnpm --filter=@brisa/api db:generate
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/brisa_cubana_test

      - name: Run tests with coverage
        run: pnpm turbo run test -- --coverage
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/brisa_cubana_test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        if: always()
        with:
          files: ./apps/api/coverage/lcov.info,./packages/ui/coverage/coverage-final.json
          flags: unittests
          name: codecov-umbrella

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "24"

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.17.1

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma Client
        run: pnpm --filter=@brisa/api db:generate
        env:
          DATABASE_URL: postgresql://placeholder

      - name: Build packages
        run: pnpm turbo run build
        env:
          DATABASE_URL: postgresql://placeholder

      - name: Check build artifacts
        run: |
          ls -la apps/web/.next
          ls -la apps/api/dist
          ls -la packages/ui/dist

  docs:
    name: Docs Artifacts
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "24"

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.17.1

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Chrome for Puppeteer
        run: npx puppeteer browsers install chrome-headless-shell

      - name: Build documentation artifacts
        run: pnpm docs:build:artifacts

      - name: Upload TypeDoc
        uses: actions/upload-artifact@v4
        with:
          name: typedoc-reference
          path: docs/_build/api
          if-no-files-found: warn

      - name: Upload Storybook
        uses: actions/upload-artifact@v4
        with:
          name: storybook-design-system
          path: packages/ui/storybook-static
          if-no-files-found: warn

      - name: Upload Diagrams
        uses: actions/upload-artifact@v4
        with:
          name: diagrams
          path: docs/_build/diagrams
          if-no-files-found: warn

  # e2e:
  #   name: Playwright E2E
  #   runs-on: ubuntu-latest
  #   needs: [build]
  #   env:
  #     NEXTAUTH_SECRET: test-secret-1234567890
  #     NEXTAUTH_URL: http://127.0.0.1:3000
  #     AUTH_DEMO_USERS: demo@brisacubanaclean.com:demo123
  #     NEXT_PUBLIC_API_URL: http://127.0.0.1:3001
  #     API_URL: http://127.0.0.1:3001
  #     PLAYWRIGHT_BASE_URL: http://127.0.0.1:3000
  #     PORT: 3000
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Setup Node
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '24'

  #     - name: Setup pnpm
  #       uses: pnpm/action-setup@v4
  #       with:
  #         version: 10.17.1

  #     - name: Install dependencies
  #       run: pnpm install --frozen-lockfile

  #     - name: Install Playwright browsers
  #       run: pnpm exec playwright install --with-deps

  #     - name: Run Playwright tests
  #       run: pnpm test:e2e -- --reporter=list
