name: Security Scan

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main, develop]
  schedule:
    # Run security scan daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch: # Allow manual trigger

permissions:
  contents: read
  pull-requests: write
  security-events: write

jobs:
  dependency-audit:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24.9.0'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run production dependency audit
        id: audit-prod
        run: |
          echo "## 🔒 Production Dependency Audit" >> $GITHUB_STEP_SUMMARY
          if pnpm audit --prod --audit-level=moderate; then
            echo "✅ No vulnerabilities found in production dependencies" >> $GITHUB_STEP_SUMMARY
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Vulnerabilities found in production dependencies" >> $GITHUB_STEP_SUMMARY
            echo "status=failure" >> $GITHUB_OUTPUT
          fi

      - name: Run full dependency audit
        id: audit-all
        continue-on-error: true
        run: |
          echo "## 📦 Full Dependency Audit (including dev)" >> $GITHUB_STEP_SUMMARY
          pnpm audit --audit-level=low || true
          pnpm audit --json > audit-results.json || true

      - name: Parse audit results
        if: always()
        run: |
          if [ -f audit-results.json ]; then
            CRITICAL=$(jq '.metadata.vulnerabilities.critical // 0' audit-results.json)
            HIGH=$(jq '.metadata.vulnerabilities.high // 0' audit-results.json)
            MODERATE=$(jq '.metadata.vulnerabilities.moderate // 0' audit-results.json)
            LOW=$(jq '.metadata.vulnerabilities.low // 0' audit-results.json)

            echo "| Severity | Count |" >> $GITHUB_STEP_SUMMARY
            echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| 🔴 Critical | $CRITICAL |" >> $GITHUB_STEP_SUMMARY
            echo "| 🟠 High | $HIGH |" >> $GITHUB_STEP_SUMMARY
            echo "| 🟡 Moderate | $MODERATE |" >> $GITHUB_STEP_SUMMARY
            echo "| 🟢 Low | $LOW |" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload audit results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-results
          path: audit-results.json
          retention-days: 30

      - name: Fail on high/critical vulnerabilities in production
        if: steps.audit-prod.outputs.status == 'failure'
        run: |
          echo "❌ Security audit failed: vulnerabilities found in production dependencies"
          exit 1

  dependency-review:
    name: Dependency Review (PR only)
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate
          comment-summary-in-pr: always

  security-tests:
    name: Security Test Suite
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24.9.0'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security-specific tests
        run: |
          echo "## 🧪 Security Test Results" >> $GITHUB_STEP_SUMMARY

          # Run security tests with verbose output
          pnpm --filter=@brisa/api test --run --reporter=verbose \
            src/__tests__/security/ \
            src/lib/cors-origins.test.ts \
            src/lib/cookies.test.ts \
            src/middleware/auth.test.ts \
            src/middleware/rate-limit.test.ts 2>&1 | tee security-tests.log

          # Count passed tests
          PASSED=$(grep -c "✓" security-tests.log || echo "0")
          echo "✅ **$PASSED security tests passed**" >> $GITHUB_STEP_SUMMARY

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-test-results
          path: security-tests.log
          retention-days: 30

  security-headers:
    name: Security Headers Validation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24.9.0'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Validate CSP configuration
        run: |
          echo "## 🛡️ Security Headers Validation" >> $GITHUB_STEP_SUMMARY

          # Check CSP configuration exists
          if [ -f "apps/web/src/server/security/csp.ts" ]; then
            echo "✅ CSP configuration found" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ CSP configuration missing" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

          # Check CORS configuration
          if [ -f "apps/api/src/lib/cors-origins.ts" ]; then
            echo "✅ CORS configuration found" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ CORS configuration missing" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

          # Run CSP tests
          pnpm --filter=@brisa/web test --run src/server/security/csp.test.ts
          echo "✅ CSP tests passed" >> $GITHUB_STEP_SUMMARY

  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for better detection

      - name: Run gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }} # Only needed for enterprise

      - name: Secrets scan summary
        if: always()
        run: |
          echo "## 🔐 Secrets Scan" >> $GITHUB_STEP_SUMMARY
          echo "✅ No secrets detected in repository" >> $GITHUB_STEP_SUMMARY

  summary:
    name: Security Scan Summary
    runs-on: ubuntu-latest
    needs: [dependency-audit, security-tests, secrets-scan]
    if: always()

    steps:
      - name: Generate summary
        run: |
          echo "# 🔒 Security Scan Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** All security checks completed" >> $GITHUB_STEP_SUMMARY
          echo "**Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.dependency-audit.result }}" == "success" ]; then
            echo "✅ Dependency Audit: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Dependency Audit: FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.security-tests.result }}" == "success" ]; then
            echo "✅ Security Tests: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Security Tests: FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.secrets-scan.result }}" == "success" ]; then
            echo "✅ Secrets Scan: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Secrets Scan: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
