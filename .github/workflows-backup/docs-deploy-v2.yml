name: Deploy Docs (v2)

on:
  push:
    branches:
      - main
    paths:
      - 'docs/**'
      - 'mkdocs.yml'
      - 'requirements.txt'
      - '.github/workflows/docs-deploy-v2.yml'
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: pages-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    name: Build Documentation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Necesario para mike versionado

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Configure git for mike
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Build with MkDocs (strict mode)
        run: mkdocs build --strict --verbose

      - name: Deploy with mike (versioning)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=$(date +"%Y.%m.%d")
          echo "üì¶ Deploying version: $VERSION"
          mike deploy --push --update-aliases "$VERSION" latest
          mike set-default --push latest
          echo "‚úÖ Deployed successfully"

      - name: Upload artifact for inspection
        uses: actions/upload-artifact@v4
        with:
          name: docs-site-${{ github.sha }}
          path: site/
          retention-days: 7

  # Verificaci√≥n post-deploy (opcional pero √∫til)
  verify:
    name: Verify Deployment
    needs: build
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: Check GitHub Pages deployment
        run: |
          echo "üîç Verificando deployment..."

          URL="https://albertodimas.github.io/brisa-cubana-clean-intelligence/"
          MAX_ATTEMPTS=10
          SLEEP_SECONDS=10
          ATTEMPT=1
          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$URL")
            if [ "$STATUS" -eq 200 ]; then
              echo "‚úÖ GitHub Pages est√° respondiendo correctamente (HTTP $STATUS) en el intento $ATTEMPT"
              break
            else
              echo "Intento $ATTEMPT: GitHub Pages respondi√≥ con HTTP $STATUS. Reintentando en $SLEEP_SECONDS segundos..."
              sleep $SLEEP_SECONDS
              ATTEMPT=$((ATTEMPT+1))
            fi
          done
          if [ "$STATUS" -ne 200 ]; then
            echo "‚ö†Ô∏è  GitHub Pages no respondi√≥ con HTTP 200 despu√©s de $MAX_ATTEMPTS intentos"
            exit 1
          fi
      - name: Verify latest version redirect
        run: |
          URL="https://albertodimas.github.io/brisa-cubana-clean-intelligence/latest/"
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$URL")

          if [ "$STATUS" -eq 200 ]; then
            echo "‚úÖ Version 'latest' est√° accesible (HTTP $STATUS)"
          else
            echo "‚ö†Ô∏è  Version 'latest' respondi√≥ con HTTP $STATUS"
            exit 1
          fi
