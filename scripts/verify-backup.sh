#!/bin/bash
# scripts/verify-backup.sh
# Verifica la integridad de un backup de base de datos

set -e

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

DATABASE_URL="${1}"

if [ -z "$DATABASE_URL" ]; then
  echo -e "${RED}‚ùå Error: DATABASE_URL no proporcionada${NC}"
  echo ""
  echo "Uso: $0 <database-url>"
  echo ""
  echo "Ejemplos:"
  echo "  $0 'postgresql://user:pass@host:5432/db'"
  echo "  $0 \"\$DATABASE_URL\""
  exit 1
fi

echo -e "${BLUE}üîç Verificando integridad de backup...${NC}"
echo ""

# Verificar conexi√≥n
echo "üì° Verificando conexi√≥n a base de datos..."
if ! psql "$DATABASE_URL" -c "SELECT version();" > /dev/null 2>&1; then
  echo -e "${RED}‚ùå No se puede conectar a la base de datos${NC}"
  exit 1
fi
echo -e "${GREEN}‚úÖ Conexi√≥n exitosa${NC}"
echo ""

# Verificar conteos de tablas cr√≠ticas
echo "üìä Verificando conteos de tablas cr√≠ticas..."
COUNTS=$(psql "$DATABASE_URL" -t -A -F'|' <<EOF
SELECT 'User' AS table_name, COUNT(*) FROM "User"
UNION ALL SELECT 'Service', COUNT(*) FROM "Service"
UNION ALL SELECT 'Property', COUNT(*) FROM "Property"
UNION ALL SELECT 'Booking', COUNT(*) FROM "Booking"
ORDER BY table_name;
EOF
)

echo "$COUNTS" | while IFS='|' read -r table_name count; do
  if [ "$count" = "0" ]; then
    echo -e "  ${YELLOW}‚ö†Ô∏è  $table_name: $count registros (vac√≠a)${NC}"
  else
    echo -e "  ${GREEN}‚úÖ $table_name: $count registros${NC}"
  fi
done
echo ""

# Verificar constraints y foreign keys
echo "üîó Verificando constraints y foreign keys..."
CONSTRAINTS=$(psql "$DATABASE_URL" -t <<EOF
SELECT
  COUNT(*)
FROM information_schema.table_constraints tc
WHERE tc.table_schema = 'public'
  AND tc.constraint_type IN ('PRIMARY KEY', 'FOREIGN KEY');
EOF
)

CONSTRAINTS=$(echo "$CONSTRAINTS" | tr -d ' ')
echo -e "  ${GREEN}‚úÖ Total constraints: $CONSTRAINTS${NC}"
echo ""

# Verificar √≠ndices
echo "üìá Verificando √≠ndices..."
INDEXES=$(psql "$DATABASE_URL" -t <<EOF
SELECT COUNT(*)
FROM pg_indexes
WHERE schemaname = 'public';
EOF
)

INDEXES=$(echo "$INDEXES" | tr -d ' ')
echo -e "  ${GREEN}‚úÖ Total √≠ndices: $INDEXES${NC}"
echo ""

# Verificar usuarios y roles
echo "üë• Verificando usuarios..."
USERS=$(psql "$DATABASE_URL" -t -A -F'|' <<EOF
SELECT role, COUNT(*)
FROM "User"
GROUP BY role
ORDER BY role;
EOF
)

echo "$USERS" | while IFS='|' read -r role count; do
  echo -e "  ${GREEN}‚úÖ $role: $count usuario(s)${NC}"
done
echo ""

# Verificar servicios activos
echo "üßπ Verificando servicios..."
SERVICES=$(psql "$DATABASE_URL" -t -A -F'|' <<EOF
SELECT
  CASE WHEN active THEN 'activos' ELSE 'inactivos' END,
  COUNT(*)
FROM "Service"
GROUP BY active;
EOF
)

if [ -z "$SERVICES" ]; then
  echo -e "  ${YELLOW}‚ö†Ô∏è  No hay servicios en la base de datos${NC}"
else
  echo "$SERVICES" | while IFS='|' read -r status count; do
    echo -e "  ${GREEN}‚úÖ Servicios $status: $count${NC}"
  done
fi
echo ""

# Verificar bookings por estado
echo "üìÖ Verificando reservas..."
BOOKINGS=$(psql "$DATABASE_URL" -t -A -F'|' <<EOF
SELECT status, COUNT(*)
FROM "Booking"
GROUP BY status
ORDER BY status;
EOF
)

if [ -z "$BOOKINGS" ]; then
  echo -e "  ${YELLOW}‚ö†Ô∏è  No hay reservas en la base de datos${NC}"
else
  echo "$BOOKINGS" | while IFS='|' read -r status count; do
    echo -e "  ${GREEN}‚úÖ $status: $count reserva(s)${NC}"
  done
fi
echo ""

# Verificar √∫ltima modificaci√≥n
echo "‚è∞ Verificando actividad reciente..."
LATEST_BOOKING=$(psql "$DATABASE_URL" -t <<EOF
SELECT
  COALESCE(MAX("updatedAt"), MAX("createdAt"))
FROM "Booking";
EOF
)

LATEST_BOOKING=$(echo "$LATEST_BOOKING" | tr -d ' ')

if [ -n "$LATEST_BOOKING" ] && [ "$LATEST_BOOKING" != "" ]; then
  echo -e "  ${GREEN}‚úÖ √öltima actividad (Booking): $LATEST_BOOKING${NC}"
else
  echo -e "  ${YELLOW}‚ö†Ô∏è  No hay actividad registrada${NC}"
fi
echo ""

# Resumen final
echo -e "${GREEN}‚úÖ Verificaci√≥n de integridad completada${NC}"
echo ""
echo "üìã Resumen:"
echo "  - Conexi√≥n: ‚úÖ OK"
echo "  - Tablas: ‚úÖ OK"
echo "  - Constraints: ‚úÖ $CONSTRAINTS"
echo "  - √çndices: ‚úÖ $INDEXES"
echo ""
echo -e "${BLUE}üí° Recomendaci√≥n: Ejecutar este script semanalmente contra el √∫ltimo backup${NC}"

exit 0
